import { FastifyPluginCallback } from "fastify";
import { EntityManager } from "typeorm";
import { AllocationRepository } from "../services/AllocationRepository";
import { BudgetRepository } from "../services/BudgetRepository";
import { TransferRepository } from "../services/TransferRepository";
import { DeleteAllocation } from "./DeleteAllocation";
import { DeleteTransaction } from "./DeleteTransaction";
import { GetAccount } from "./GetAccount";
import { GetAccounts } from "./GetAccounts";
import { GetAllocation } from "./GetAllocation";
import { GetBudget } from "./GetBudget";
import { GetBudgets } from "./GetBudgets";
import { GetEnvelope } from "./GetEnvelope";
import { GetEnvelopeGroup } from "./GetEnvelopeGroup";
import { GetEnvelopeGroups } from "./GetEnvelopeGroups";
import { GetEnvelopes } from "./GetEnvelopes";
import { GetTransaction } from "./GetTransaction";
import { GetTransactions } from "./GetTransactions";
import { SaveAccount } from "./SaveAccount";
import { SaveAllocation } from "./SaveAllocation";
import { SaveBudget } from "./SaveBudget";
import { SaveEnvelope } from "./SaveEnvelope";
import { SaveEnvelopeGroup } from "./SaveEnvelopeGroup";
import { SaveTransaction } from "./SaveTransaction";
import { SaveTransactionStatus } from "./SaveTransactionStatus";
import { SaveTransfer } from "./SaveTransfer";
import { SignIn } from "./SignIn";
import { SignUp } from "./SignUp";

export const Routes = (deps: {
  JWT_SECRET: string;
  entities: EntityManager;
  allocationRepository: AllocationRepository;
  transferRepository: TransferRepository;
  budgetRepository: BudgetRepository;
}): FastifyPluginCallback => {
  return (server, _, done) => {
    server.register(SignIn(deps));
    server.register(SignUp(deps));
    server.register(SaveAccount(deps));
    server.register(GetAccounts(deps));
    server.register(GetAccount(deps));
    server.register(GetBudgets(deps));
    server.register(GetBudget(deps));
    server.register(GetTransaction(deps));
    server.register(SaveBudget(deps));
    server.register(SaveEnvelope(deps));
    server.register(SaveEnvelopeGroup(deps));
    server.register(SaveTransaction(deps));
    server.register(DeleteTransaction(deps));
    server.register(SaveTransactionStatus(deps));
    server.register(SaveAllocation(deps));
    server.register(DeleteAllocation(deps));
    server.register(GetAllocation(deps));
    server.register(GetTransactions(deps));
    server.register(GetEnvelopes(deps));
    server.register(GetEnvelopeGroups(deps));
    server.register(GetEnvelopeGroup(deps));
    server.register(GetEnvelope(deps));
    server.register(SaveTransfer(deps));
    done();
  };
};
